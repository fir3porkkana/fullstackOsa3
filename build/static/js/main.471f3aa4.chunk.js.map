{"version":3,"sources":["services/serverService.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","serverService","newPostee","axios","post","get","then","response","data","removee","console","log","delete","concat","id","_ref","replacement","put","Filter","props","react_default","a","createElement","value","filter","onChange","Notification","message","className","Person","_ref2","person","persons","setPersons","setErrorMessage","Fragment","name","number","onClick","handleDeletion","result","window","confirm","iidee","rel","setTimeout","backendresult","Persons","_ref3","personsToShow","map","key","App_Person","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","showAll","setShowAll","_useState9","_useState10","setFilter","_useState11","_useState12","errorMessage","useEffect","includes","App_Notification","App_Filter","event","target","onSubmit","preventDefault","personObject","find","catch","error","type","App_Persons","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.471f3aa4.chunk.js","sourcesContent":["import axios from \"axios\"\nconst baseUrl = \"https://evening-everglades-61126.herokuapp.com/api/persons\"\n\nconst post = newPostee => {\n  return axios.post(baseUrl, newPostee)\n}\n\nconst get = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst remove = removee => {\n  console.log(removee)\n  return axios.delete(`${baseUrl}/${removee.id}`)\n}\n\nconst put = ({ replacement, id }) => {\n  console.log(\"tunnistettavaa putissa\", id)\n  console.log(replacement)\n  return axios.put(`${baseUrl}/${id}`, replacement)\n}\n\nexport default {\n  post,\n  get,\n  remove,\n  put\n}\n","import React, { useState, useEffect } from \"react\"\nimport axios from \"axios\"\nimport serverService from \"./services/serverService\"\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState(\"\")\n  const [newNumber, setNewNumber] = useState(\"\")\n  const [showAll, setShowAll] = useState(true)\n  const [filter, setFilter] = useState(\"\")\n  const [errorMessage, setErrorMessage] = useState(\"\")\n\n  useEffect(() => {\n    console.log(\"effect\")\n    axios\n      .get(\"https://evening-everglades-61126.herokuapp.com/api/persons\")\n      .then(response => {\n        console.log(\"promise fulfilled\")\n        setPersons(response.data)\n      })\n  }, [])\n\n  const addPerson = event => {\n    event.preventDefault()\n    console.log(\"prevent default\", event.target.value)\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    console.log(personObject)\n    console.log(persons.includes(personObject))\n\n    if (!persons.map(person => person.name).includes(newName)) {\n      serverService.post(personObject).then(() =>\n        serverService.get().then(result => {\n          console.log(\"result\", result)\n          setPersons(result)\n          setErrorMessage(`henkilö '${newName}' lisätty`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n      )\n    } else {\n      const queryResult = window.confirm(\n        `${newName} on jo luettelossa. Korvataanko vanha numero uudella?`\n      )\n      if (queryResult) {\n        const id = persons.find(person => person.name === newName).id\n        console.log(\"tunnistettavaa \", id)\n        serverService.put({ replacement: personObject, id }).then(() =>\n          serverService\n            .get()\n            .then(result => {\n              console.log(\"result\", result)\n              setPersons(result)\n            })\n            .catch(error => {\n              setErrorMessage(`henkilö '${newName}' oli jo poistettu`)\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)\n            })\n        )\n\n        setErrorMessage(`henkilön '${newName}' numero muutettu`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      }\n    }\n    setNewName(\"\")\n    setNewNumber(\"\")\n  }\n\n  const handleNameChange = event => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = event => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = event => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n    if (event.target.value !== \"\") {\n      setShowAll(false)\n    } else setShowAll(true)\n  }\n\n  const personsToShow = showAll\n    ? persons\n    : persons.filter(person => person.name.includes(filter))\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n\n      <div>\n        <Notification message={errorMessage} />\n      </div>\n\n      <div>\n        <Filter filter={filter} onChange={handleFilterChange} />\n      </div>\n\n      <h3>lisää uusi</h3>\n\n      <form onSubmit={addPerson}>\n        <div>\n          nimi: <input value={newName} onChange={handleNameChange} />\n        </div>\n\n        <div>\n          numero: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n\n        <div>\n          <button type=\"submit\">lisää</button>\n        </div>\n      </form>\n      <h2>Numerot</h2>\n      <div>\n        <Persons\n          persons={persons}\n          personsToShow={personsToShow}\n          setPersons={setPersons}\n          setErrorMessage={setErrorMessage}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst Filter = props => {\n  console.log()\n\n  return (\n    <div>\n      rajaa tuloksia: <input value={props.filter} onChange={props.onChange} />\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return <div className=\"error\">{message}</div>\n}\n\nconst Person = ({ person, persons, setPersons, setErrorMessage }) => {\n  console.log(\"person sanoo\", person)\n  return (\n    <>\n      {person.name} {person.number}\n      <button\n        onClick={() =>\n          handleDeletion(person, persons, setPersons, setErrorMessage)\n        }\n      >\n        poista{\" \"}\n      </button>\n    </>\n  )\n}\n\nconst handleDeletion = (person, persons, setPersons, setErrorMessage) => {\n  const result = window.confirm(`poistetaanko ${person.name}`)\n  const iidee = person.id\n  if (result) {\n    serverService.remove(person).then(rel => {\n      setErrorMessage(`henkilö ${person.name} poistettu`)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    })\n    serverService.get().then(backendresult => {\n      console.log(\"result\", backendresult)\n      setPersons(backendresult)\n      setPersons(persons.filter(person => person.id !== iidee))\n    })\n  }\n}\n\nconst Persons = ({ persons, personsToShow, setPersons, setErrorMessage }) => {\n  console.log(personsToShow)\n\n  return (\n    <ul>\n      {personsToShow.map(person => (\n        <li key={person.id}>\n          <Person\n            person={person}\n            persons={persons}\n            setPersons={setPersons}\n            setErrorMessage={setErrorMessage}\n          />\n        </li>\n      ))}\n    </ul>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}